{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/WebProject/project-and-learning-documentations-dreamteam/application-tracker/src/components/networking-events/short-my-events.component.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n/**\n * This component loads the short list of my events on the networking-home.component\n */\n\nexport default class ShortMyEventsComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventList: [],\n      dataReceived: false\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/appli-job-app-tracker/networking/getMyEventsShort/1').then(response => {\n      console.log(response);\n      this.setState({\n        eventList: response.data,\n        dataReceived: true\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  drawContent() {\n    if (this.state.eventList.length === 0 && this.state.dataReceived === false) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center h-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"spinner-border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }\n      }, \"Loading...\")));\n    } //if data is retrieved but there are no events in the system, say there are currently no events in the system\n    else if (this.state.eventList.length === 0 && this.state.dataReceived === true) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"mt-3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 20\n          }\n        }, \"You do not currently have any logged networking events.\");\n      } //options for the date string\n\n\n    let options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }; //creates a custom style based on the given delay (in seconds)\n\n    function delayAppearance(delay) {\n      return {\n        animationName: 'eventAppear',\n        animationTimingFunction: 'ease-in-out',\n        animationDuration: '0.3s',\n        animationDelay: delay * 0.1 + 's',\n        animationIterationCount: 1,\n        animationDirection: 'normal',\n        animationFillMode: 'forwards'\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, this.state.eventList.map((event, iteration) => {\n      //convert the date string to the text representation ie. 10 -> October\n      let eventDate = new Date(event.event_date); //add a day because it subtracts a day for some reason\n\n      eventDate.setDate(eventDate.getDate() + 1);\n      eventDate = eventDate.toLocaleString('en-CA', options);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mt-2 startOpaque\",\n        key: event._id,\n        style: delayAppearance(iteration),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }\n      }, event.event_title), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }\n      }, event.event_location, \" | \", eventDate), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/networking-events/details/\" + event._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 34\n        }\n      }, \"Details\")));\n    }));\n  } //TODO: replace dummy content with database entries\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"eventShortListHolder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"My Events\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"minHeight\": \"18rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, this.drawContent()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-2 float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/networking-events/my-events\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"See All \\u2192\")));\n  }\n\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/WebProject/project-and-learning-documentations-dreamteam/application-tracker/src/components/networking-events/short-my-events.component.js"],"names":["React","Component","Link","axios","ShortMyEventsComponent","constructor","props","state","eventList","dataReceived","componentDidMount","get","then","response","console","log","setState","data","catch","error","drawContent","length","options","year","month","day","delayAppearance","delay","animationName","animationTimingFunction","animationDuration","animationDelay","animationIterationCount","animationDirection","animationFillMode","map","event","iteration","eventDate","Date","event_date","setDate","getDate","toLocaleString","_id","event_title","event_location","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport axios from 'axios';\n\n\n/**\n * This component loads the short list of my events on the networking-home.component\n */\nexport default class ShortMyEventsComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventList: [],\n            dataReceived: false\n        }\n    }\n\n    componentDidMount() {\n        axios.get('/appli-job-app-tracker/networking/getMyEventsShort/1')\n            .then(response => {\n                console.log(response);\n                this.setState({ eventList: response.data, dataReceived: true });\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n\n    drawContent() {\n        if (this.state.eventList.length === 0 && this.state.dataReceived === false) {\n            return (\n                <div className=\"d-flex align-items-center justify-content-center h-100\">\n                    <div className=\"spinner-border\" role=\"status\" >\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            )\n        }\n        //if data is retrieved but there are no events in the system, say there are currently no events in the system\n        else if (this.state.eventList.length === 0 && this.state.dataReceived === true) {\n            return <div className=\"mt-3\">You do not currently have any logged networking events.</div>\n        }\n\n        //options for the date string\n        let options = { year: 'numeric', month: 'long', day: 'numeric' };\n\n        //creates a custom style based on the given delay (in seconds)\n        function delayAppearance(delay) {\n            return {\n                animationName: 'eventAppear',\n                animationTimingFunction: 'ease-in-out',\n                animationDuration: '0.3s',\n                animationDelay: (delay * 0.1) + 's',\n                animationIterationCount: 1,\n                animationDirection: 'normal',\n                animationFillMode: 'forwards'\n            }\n        }\n\n        return (\n            <div>\n                {this.state.eventList.map((event, iteration) => {\n\n                    //convert the date string to the text representation ie. 10 -> October\n                    let eventDate = new Date(event.event_date);\n                    //add a day because it subtracts a day for some reason\n                    eventDate.setDate(eventDate.getDate() + 1);\n                    eventDate = eventDate.toLocaleString('en-CA', options);\n\n                    return (\n                        <div className=\"mt-2 startOpaque\" key={event._id} style={delayAppearance(iteration)}>\n                            <h5>{event.event_title}</h5>\n                            <div>{event.event_location} | {eventDate}</div>\n                            <div><Link to={\"/networking-events/details/\" + event._id}>Details</Link></div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    //TODO: replace dummy content with database entries\n    render() {\n        return (\n            <div className=\"eventShortListHolder\">\n                <h2>My Events</h2>\n                <div style={{ \"minHeight\": \"18rem\" }}>\n                    {this.drawContent()}\n                </div>\n                <div className=\"mt-2 float-right\">\n                    <Link to=\"/networking-events/my-events\">See All &rarr;</Link>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}
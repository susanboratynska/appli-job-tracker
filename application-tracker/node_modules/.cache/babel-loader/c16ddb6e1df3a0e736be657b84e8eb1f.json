{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/WebProject/project-and-learning-documentations-dreamteam/application-tracker/src/components/networking-events/my-events-list.component.js\";\n\n/********** NOTE: This component reuses styling and page layout from Susan's list-networking.component.js file ****** */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport queryString from 'query-string'; //the styling for the delayed appearance\n\nfunction delayAppearance(delay) {\n  return {\n    animationName: 'eventAppear',\n    animationTimingFunction: 'ease-in-out',\n    animationDuration: '0.3s',\n    animationDelay: delay * 0.1 + 's',\n    animationIterationCount: 1,\n    animationDirection: 'normal',\n    animationFillMode: 'forwards'\n  };\n} //this is a networking component\n\n\nconst Networking = props => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"event startOpaque\",\n  style: delayAppearance(props.iteration),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"event__date\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }\n}, formatDate(props.networking.event_date)), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"event__info\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"event__title\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 17\n  }\n}, \" \", props.networking.event_title, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"event__details tooltip-toggle\",\n  \"data-tooltip\": \"Location\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  src: \"/images/icons/location.svg\",\n  className: \"event__icons\",\n  alt: \"Event Icon\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 17\n  }\n}), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"display__inlineblock\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 17\n  }\n}, \" \", props.networking.event_location)), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"event__details tooltip-toggle\",\n  \"data-tooltip\": \"Event Host\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  src: \"/images/icons/user.svg\",\n  className: \"event__icons\",\n  alt: \"Event Host Icon\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 17\n  }\n}), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"display__inlineblock\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 17\n  }\n}, props.networking.event_host)), /*#__PURE__*/React.createElement(\"a\", {\n  href: '/networking-events/details/' + props.networking._id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  src: \"/images/icons/plus.svg\",\n  className: \"event__morebtn\",\n  alt: \"See Details Button\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 76\n  }\n})))); // ---------- Functions ---------- //\n\n\nfunction formatDate(string) {\n  // Trick to get the correct date since it's giving the date back one day off:\n  // SRC: https://stackoverflow.com/questions/7556591/is-the-javascript-date-object-always-one-day-off\n  string = new Date(string.replace(/-/g, '\\/').replace(/T.+/, ''));\n  var options = {\n    month: 'short',\n    day: 'numeric'\n  };\n  return new Date(string).toLocaleDateString([], options);\n}\n/**\n * The my events page, which lists all events the current logged in user personally created\n */\n\n\nexport default class MyEventsListComponent extends React.Component {\n  constructor(props) {\n    super(props); //networking state variable holds all JSON data\n\n    this.state = {\n      networking: [],\n      urlQueries: queryString.parse(this.props.location.search),\n      dataReceived: false\n    };\n    document.title = \"Appli - My Networking Events\";\n  }\n\n  componentDidMount() {\n    //TODO: change this to only be this logged in users applications once user accounts are set up\n    axios.get('/appli-job-app-tracker/networking').then(response => {\n      this.setState({\n        networking: response.data,\n        dataReceived: true\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // Create eventList method:\n\n\n  eventList() {\n    //Sam - show loading spinner before data gets retrieved\n    if (this.state.networking.length === 0 && this.state.dataReceived === false) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"spinner-border d-flex justify-content-center\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, \"Loading...\"));\n    } //if data is retrieved but there are no events in the system, say there are currently no events in the system\n    else if (this.state.networking.length === 0 && this.state.dataReceived === true) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"mt-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 20\n          }\n        }, \"You do not currently have any logged networking events.\");\n      } // Iterate over elements\n    // map callback function gets all items\n\n\n    return this.state.networking.map(function (currentNetwork, i) {\n      return /*#__PURE__*/React.createElement(Networking, {\n        networking: currentNetwork,\n        key: i,\n        iteration: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n  /**\n   * Checks if there are any CRUD actions in the URL and prints an alert panel to show it (ie. url?action=deleted will print a panel showing something has been deleted)\n   */\n\n\n  checkForAlerts() {\n    if (this.state.urlQueries.action === \"deleted\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"alert alert-danger \",\n        role: \"alert\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, \"Networking event successfully deleted.\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"contentcontainer\",\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \"Networking Events\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, \"My Events\"), this.checkForAlerts(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page__nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/networking-events\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-dark mr-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 55\n      }\n    }, \"Go Back\")), /*#__PURE__*/React.createElement(Link, {\n      to: \"/networking-events/add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 59\n      }\n    }, \"Add Event\"))), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"jobapplist_search\",\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }, \"Search\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"search__bar\",\n      id: \"jobapplist_search\",\n      type: \"text\",\n      placeholder: \"Search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"event__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, this.eventList()));\n  }\n\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/WebProject/project-and-learning-documentations-dreamteam/application-tracker/src/components/networking-events/my-events-list.component.js"],"names":["React","Component","Link","axios","queryString","delayAppearance","delay","animationName","animationTimingFunction","animationDuration","animationDelay","animationIterationCount","animationDirection","animationFillMode","Networking","props","iteration","formatDate","networking","event_date","event_title","event_location","event_host","_id","string","Date","replace","options","month","day","toLocaleDateString","MyEventsListComponent","constructor","state","urlQueries","parse","location","search","dataReceived","document","title","componentDidMount","get","then","response","setState","data","catch","error","console","log","eventList","length","map","currentNetwork","i","checkForAlerts","action","render","marginTop"],"mappings":"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","sourcesContent":["/********** NOTE: This component reuses styling and page layout from Susan's list-networking.component.js file ****** */\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport axios from 'axios';\nimport queryString from 'query-string';\n\n//the styling for the delayed appearance\nfunction delayAppearance(delay) {\n    return {\n        animationName: 'eventAppear',\n        animationTimingFunction: 'ease-in-out',\n        animationDuration: '0.3s',\n        animationDelay: (delay * 0.1) + 's',\n        animationIterationCount: 1,\n        animationDirection: 'normal',\n        animationFillMode: 'forwards'\n    }\n}\n\n//this is a networking component\nconst Networking = props => (\n    <div className='event startOpaque' style={delayAppearance(props.iteration)}>\n        <div className=\"event__date\">\n            {formatDate(props.networking.event_date)}\n        </div>\n        <div className='event__info'>\n            <h2><span className='event__title'> {props.networking.event_title} </span></h2>\n            <div className='event__details tooltip-toggle' data-tooltip='Location'>\n                <img src=\"/images/icons/location.svg\" className='event__icons' alt=\"Event Icon\" />\n                <p className=\"display__inlineblock\"> {props.networking.event_location}</p>\n            </div>\n            <div className='event__details tooltip-toggle' data-tooltip='Event Host'>\n                <img src=\"/images/icons/user.svg\" className='event__icons' alt=\"Event Host Icon\" />\n                <p className=\"display__inlineblock\">{props.networking.event_host}</p>\n            </div>\n            <a href={'/networking-events/details/' + props.networking._id}><img src=\"/images/icons/plus.svg\" className='event__morebtn' alt=\"See Details Button\" /></a>\n        </div>\n    </div>\n)\n\n// ---------- Functions ---------- //\nfunction formatDate(string) {\n    // Trick to get the correct date since it's giving the date back one day off:\n    // SRC: https://stackoverflow.com/questions/7556591/is-the-javascript-date-object-always-one-day-off\n    string = new Date(string.replace(/-/g, '\\/').replace(/T.+/, ''));\n    var options = { month: 'short', day: 'numeric' };\n    return new Date(string).toLocaleDateString([], options);\n}\n\n\n\n\n\n\n/**\n * The my events page, which lists all events the current logged in user personally created\n */\nexport default class MyEventsListComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        //networking state variable holds all JSON data\n        this.state = {\n            networking: [],\n            urlQueries: queryString.parse(this.props.location.search),\n            dataReceived: false\n        };\n\n        document.title = \"Appli - My Networking Events\";\n\n\n\n\n    }\n\n    componentDidMount() {\n        //TODO: change this to only be this logged in users applications once user accounts are set up\n        axios.get('/appli-job-app-tracker/networking')\n            .then(response => {\n                this.setState({ networking: response.data, dataReceived: true })\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    // Create eventList method:\n    eventList() {\n        //Sam - show loading spinner before data gets retrieved\n        if (this.state.networking.length === 0 && this.state.dataReceived === false) {\n            return (<div className=\"spinner-border d-flex justify-content-center\" role=\"status\" >\n                <span className=\"sr-only\">Loading...</span>\n            </div>)\n        }\n        //if data is retrieved but there are no events in the system, say there are currently no events in the system\n        else if (this.state.networking.length === 0 && this.state.dataReceived === true) {\n            return <div className=\"mt-5\">You do not currently have any logged networking events.</div>\n        }\n\n        // Iterate over elements\n        // map callback function gets all items\n        return this.state.networking.map(function (currentNetwork, i) {\n            return <Networking networking={currentNetwork} key={i} iteration={i}/>;\n        })\n    }\n\n    /**\n     * Checks if there are any CRUD actions in the URL and prints an alert panel to show it (ie. url?action=deleted will print a panel showing something has been deleted)\n     */\n    checkForAlerts() {\n        if (this.state.urlQueries.action === \"deleted\") {\n            return (\n                <div class=\"alert alert-danger \" role=\"alert\">\n                    Networking event successfully deleted.\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"contentcontainer\" style={{ marginTop: 10 }}>\n                <h1>Networking Events</h1>\n                <h2>My Events</h2>\n                {this.checkForAlerts()}\n                <div className=\"page__nav\">\n                    <div>\n                        <Link to=\"/networking-events\"><button className=\"btn btn-outline-dark mr-1\">Go Back</button></Link>\n                        <Link to=\"/networking-events/add\"><button className=\"btn btn-outline-primary\">Add Event</button></Link>\n                    </div>\n                    <form>\n                        <label htmlFor=\"jobapplist_search\" hidden>Search</label>\n                        <input className=\"search__bar\" id=\"jobapplist_search\" type=\"text\" placeholder=\"Search\" ></input>\n                    </form>\n                </div>\n                <div className='event__container'>\n                    {this.eventList()}\n                </div>\n\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}
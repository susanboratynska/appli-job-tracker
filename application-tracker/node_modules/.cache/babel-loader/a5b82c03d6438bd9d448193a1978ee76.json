{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/WebProject/project-and-learning-documentations-dreamteam/application-tracker/src/components/contacts/list-contacts.component.js\";\nimport React, { Component } from 'react'; // import { Link } from 'react-router-dom';\n\nimport axios from 'axios';\nimport linkedin from \"../../images/icons/linkedin.svg\";\nimport mail from \"../../images/icons/mail.svg\";\nimport call from \"../../images/icons/call.svg\";\nimport more from \"../../images/icons/more.svg\";\n\nconst Contacts = props => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"contact\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"contact__name\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 13\n  }\n}, props.contact.contact_firstname, /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 52\n  }\n}), props.contact.contact_lastname)), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"contact__info\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"contact__jobtitle\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 17\n  }\n}, props.contact.contact_jobtitle), /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 92\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  className: \"contact__company\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 17\n  }\n}, props.contact.contact_company), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"contacts__social\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 13\n  }\n}, displayEmailIcon(props.contact.contact_email), displayPhoneIcon(props.contact.contact_phone), displayLinkedInIcon(props.contact.contact_linkedin), /*#__PURE__*/React.createElement(\"a\", {\n  href: \"/contact/show/\" + props.contact._id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  src: more,\n  className: \"contact__moreicon\",\n  alt: \"More Info\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 21\n  }\n}))))); // ---------- Functions ---------- //\n// Function to display LinkedIn icon only if linked in account exists:\n\n\nfunction displayEmailIcon(stringURL) {\n  if (stringURL) {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      href: 'mailto:' + stringURL,\n      className: \"tooltip-toggle\",\n      \"data-tooltip\": 'Email: ' + stringURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: mail,\n      className: \"contact__socialicons\",\n      alt: \"Link to Email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }));\n  }\n} // Function to display LinkedIn icon only if linked in account exists:\n\n\nfunction displayPhoneIcon(stringURL) {\n  if (stringURL) {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/\",\n      target: \"_blank\",\n      className: \"tooltip-toggle\",\n      \"data-tooltip\": 'Phone Number: ' + stringURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: call,\n      className: \"contact__socialicons\",\n      alt: \"Phone Number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }));\n  }\n} // Function to display LinkedIn icon only if linked in account exists:\n\n\nfunction displayLinkedInIcon(stringURL) {\n  if (stringURL) {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      href: stringURL,\n      target: \"_blank\",\n      className: \"tooltip-toggle\",\n      \"data-tooltip\": \"Link to Profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: linkedin,\n      className: \"contact__socialicons\",\n      alt: \"Link to LinkedIn Profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }));\n  }\n}\n\nexport default class ListContactsComponent extends Component {\n  // Take a constructor and pass in props from the component:\n  constructor(props) {\n    // Taking the parent constructor and passing in props:\n    super(props); // Set initial state object to contain a property of contact:\n    // And that property is initially containing an empty array:\n\n    this.state = {\n      contact: []\n    };\n  } // Need ot initialize the contact state property here with the contact\n  // need to find a way to initially send request to teh backend, to get the response\n  // back a list of contact items to set the state property accordingly\n\n\n  componentDidMount() {\n    axios.get('http://localhost:4000/appli-job-app-tracker/contacts').then(response => {\n      this.setState({\n        contact: response.data\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // Create contactList method:\n\n\n  contactList() {\n    // Iterate over elements\n    // map callback function gets all items\n    return this.state.contact.map(function (currentContact, i) {\n      return /*#__PURE__*/React.createElement(Contacts, {\n        contact: currentContact,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"contentcontainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, \"Contacts\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/contacts/add\",\n      className: \"btn btn-outline-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, \"Add New Contact\"), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"contactlist_search\",\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \"Search\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"search__bar\",\n      id: \"contactlist_search\",\n      type: \"text\",\n      placeholder: \"Search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"contacts__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, this.contactList()));\n  }\n\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/WebProject/project-and-learning-documentations-dreamteam/application-tracker/src/components/contacts/list-contacts.component.js"],"names":["React","Component","axios","Contacts","props","contact","contact_firstname","contact_lastname","contact_jobtitle","contact_company","displayEmailIcon","contact_email","displayPhoneIcon","contact_phone","displayLinkedInIcon","contact_linkedin","_id","more","stringURL","mail","call","linkedin","ListContactsComponent","constructor","state","componentDidMount","get","then","response","setState","data","catch","error","console","log","contactList","map","currentContact","i","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import { Link } from 'react-router-dom';\nimport axios from 'axios';\n\n\nimport linkedin from \"../../images/icons/linkedin.svg\";\nimport mail from \"../../images/icons/mail.svg\";\nimport call from \"../../images/icons/call.svg\";\nimport more from \"../../images/icons/more.svg\";\n\n\nconst Contacts = props => (\n    <div className='contact'>\n        <div className='contact__name'>\n            <h2>{ props.contact.contact_firstname }<br/>{ props.contact.contact_lastname }</h2>\n        </div>\n        <div className='contact__info'>\n                <span className='contact__jobtitle'>{props.contact.contact_jobtitle}</span><br/>\n                <span className='contact__company'>{ props.contact.contact_company }</span>\n            <div className='contacts__social'>\n                { displayEmailIcon( props.contact.contact_email ) }\n                { displayPhoneIcon( props.contact.contact_phone ) }\n                { displayLinkedInIcon( props.contact.contact_linkedin ) }\n                <a href={\"/contact/show/\" + props.contact._id}>\n                    <img src={more} className='contact__moreicon' alt=\"More Info\" />\n                </a>\n\n            </div>\n        </div>\n    </div>\n)\n\n// ---------- Functions ---------- //\n\n\n// Function to display LinkedIn icon only if linked in account exists:\nfunction displayEmailIcon (stringURL) {\n    if (stringURL) {\n        return (\n            <a href={'mailto:' + stringURL } className='tooltip-toggle' data-tooltip={'Email: ' + stringURL}>\n                <img src={mail} className='contact__socialicons' alt=\"Link to Email\"/>\n            </a>\n        )\n    }\n}\n\n// Function to display LinkedIn icon only if linked in account exists:\nfunction displayPhoneIcon (stringURL) {\n    if (stringURL) {\n        return (\n            <a href='/' target='_blank' className='tooltip-toggle' data-tooltip= {'Phone Number: ' + stringURL}>\n                <img src={call} className='contact__socialicons' alt=\"Phone Number\"/>\n            </a>\n        )\n    }\n}\n\n// Function to display LinkedIn icon only if linked in account exists:\nfunction displayLinkedInIcon (stringURL) {\n    if (stringURL) {\n        return (\n            <a href={stringURL} target='_blank' className='tooltip-toggle' data-tooltip='Link to Profile'>\n                <img src={linkedin} className='contact__socialicons' alt=\"Link to LinkedIn Profile\"/>\n            </a>\n        )\n    }\n}\n\nexport default class ListContactsComponent extends Component {\n\n    // Take a constructor and pass in props from the component:\n    constructor(props) {\n        // Taking the parent constructor and passing in props:\n        super(props);\n        // Set initial state object to contain a property of contact:\n        // And that property is initially containing an empty array:\n        this.state = {contact: []};\n    }\n\n\n\n    // Need ot initialize the contact state property here with the contact\n    // need to find a way to initially send request to teh backend, to get the response\n    // back a list of contact items to set the state property accordingly\n    componentDidMount(){\n        axios.get('http://localhost:4000/appli-job-app-tracker/contacts')\n            .then(response => {\n                this.setState({contact: response.data})\n            })\n            .catch(function(error) {\n                console.log(error);\n            })\n    }\n\n    // Create contactList method:\n    contactList() {\n        // Iterate over elements\n        // map callback function gets all items\n        return this.state.contact.map(function(currentContact, i) {\n            return <Contacts contact={currentContact} key={i} />;\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"contentcontainer\">\n                <h1>Contacts</h1>\n                <a href='/contacts/add' className='btn btn-outline-primary'>Add New Contact</a>\n                    <form>\n                        <label for=\"contactlist_search\" hidden>Search</label>\n                        <input className=\"search__bar\" id=\"contactlist_search\" type=\"text\" placeholder=\"Search\" />\n                    </form>\n                <div className=\"contacts__container\">\n                    { this.contactList() }\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}